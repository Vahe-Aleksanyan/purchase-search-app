import sqlite3
import pandas as pd
import streamlit as st
from pathlib import Path
import unicodedata
import tempfile

DB = Path("data/purchases.db")
st.set_page_config(page_title="‘≥’∂’∏÷Ç’¥’∂’•÷Ä’´ ’∏÷Ä’∏’∂’∏÷Ç’¥", layout="wide")

pd.set_option("display.max_colwidth", 100)

# --- ‘≤÷Ä’•’∂’§’´’∂’£ ---
# st.image("assets/logo.jpg", width=120)  # ’ì’∏’≠’°÷Ä’´’∂’•÷Ñ ’±’•÷Ä ’¨’∏’£’∏’µ’∏’æ
st.title("üõí ‘≥’∂’∏÷Ç’¥’∂’•÷Ä’´ ÷É’∂’ø÷Ä’∏÷Ç’¥")
st.caption("’à÷Ä’∏’∂’•÷Ñ ’°’∫÷Ä’°’∂÷Ñ’∂’•÷Ä’ù ’®’Ω’ø ’°’∂’æ’°’∂’∏÷Ç’¥’´, ’Ø’∏’§’´ ’Ø’°’¥ ’¥’°’ø’°’Ø’°÷Ä’°÷Ä’´, ÷á ’æ’•÷Ä’¢’•’º’∂’•÷Ñ Excel ÷É’°’Ω’ø’°’©’≤’©’•÷Ä:")
st.markdown("---")

def normalize(text):
    if not text:
        return ""
    return unicodedata.normalize("NFKD", str(text)).lower().strip()


def query(sql, params=()):
    with sqlite3.connect(DB) as conn:
        return pd.read_sql_query(sql, conn, params=params)


def localize_columns(df):
    return df.rename(columns={
        "id": "’Ä’°’¥’°÷Ä",
        "product_code": "‘±’∫÷Ä’°’∂÷Ñ’´ ’Ø’∏’§",
        "product_name": "‘±’∫÷Ä’°’∂÷Ñ’´ ’°’∂’æ’°’∂’∏÷Ç’¥",
        "supplier": "’Ñ’°’ø’°’Ø’°÷Ä’°÷Ä",
        "date": "‘±’¥’Ω’°’©’´’æ",
        "qty": "’î’°’∂’°’Ø",
        "unit": "’â’°÷É’¥’°’∂ ’¥’´’°’æ’∏÷Ä",
        "price": "‘≥’´’∂",
        "total_price": "‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’£’´’∂",
        "source_file": "‘±’≤’¢’µ’∏÷Ç÷Ä ÷Ü’°’µ’¨"
    })


st.sidebar.header("üì§ ’Ü’∏÷Ä Excel ÷É’°’Ω’ø’°’©’≤’©’•÷Ä’´ ’æ’•÷Ä’¢’•’º’∂’∏÷Ç’¥")
uploads = st.sidebar.file_uploader(
    "‘∏’∂’ø÷Ä’•÷Ñ `.xlsx` ÷Ü’°’µ’¨’•÷Ä", type="xlsx", accept_multiple_files=True
)

if uploads:
    from ingestion.ingest_excel import ingest
    imported, failed = 0, []

    for f in uploads:
        try:
            tmp = Path(tempfile.gettempdir()) / f.name
            tmp.write_bytes(f.getbuffer())
            ingest([tmp])
            imported += 1
        except sqlite3.IntegrityError:
            failed.append((f.name, "‘ø÷Ä’Ø’∂’æ’∏’≤ ’ø’∏’≤’•÷Ä (’¢’°’¶’°’µ’∏÷Ç’¥ ’°÷Ä’§’•’∂ ’Ø’°)"))
        except Exception as e:
            failed.append((f.name, str(e)))

    if imported:
        st.sidebar.success(f"‚úÖ ’é’•÷Ä’¢’•’º’∂’æ’•’¨ ’ß {imported} ÷Ü’°’µ’¨")
    if failed:
        for fname, msg in failed:
            st.sidebar.error(f"‚ùå {fname} ‚Äî ’Ω’≠’°’¨: {msg}")


tab1, tab2, tab3 = st.tabs(["üîç ‘±’∫÷Ä’°’∂÷Ñ’´ ’Ø’∏’§’∏’æ", "üîç ‘±’∂’æ’°’∂’∏÷Ç’¥’∏’æ", "üîç ’Ñ’°’ø’°’Ø’°÷Ä’°÷Ä’∏’æ"])

with tab1:
    pid = st.text_input("‘±’∫÷Ä’°’∂÷Ñ’´ ’Ø’∏’§")
    if pid:
        df = query("SELECT * FROM purchases WHERE product_code = ?", [pid])
        st.dataframe(localize_columns(df), use_container_width=True)

with tab2:
    pname = st.text_input("‘±’∫÷Ä’°’∂÷Ñ’´ ’°’∂’æ’°’∂’∏÷Ç’¥")
    if pname:
        pname_norm = normalize(pname)
        df = query("SELECT * FROM purchases", [])
        df["__norm__"] = df["product_name"].apply(normalize)
        filtered = df[df["__norm__"].str.contains(pname_norm)]
        st.dataframe(localize_columns(filtered.drop(columns=["__norm__"])), use_container_width=True)

with tab3:
    supp = st.text_input("’Ñ’°’ø’°’Ø’°÷Ä’°÷Ä’´ ’°’∂’∏÷Ç’∂")
    if supp:
        supp_norm = normalize(supp)
        df = query("SELECT * FROM purchases", [])
        df["__norm__"] = df["supplier"].apply(normalize)
        filtered = df[df["__norm__"].str.contains(supp_norm)]
        st.dataframe(localize_columns(filtered.drop(columns=["__norm__"])), use_container_width=True)

st.markdown("---")
st.markdown("""
    <style>
    div[data-baseweb="input"] > div {
        border: 2px solid black !important;
        border-radius: 5px;
        padding: 4px;
    }
    </style>
""", unsafe_allow_html=True)
